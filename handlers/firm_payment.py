# handlers/firm_payment.py
import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import gspread
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

from keyboards import main_kb
from config import GSHEET_NAME, GSHEET_CREDS

router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
if GSHEET_CREDS:
    gc = gspread.service_account_from_dict(GSHEET_CREDS)
else:
    gc = gspread.service_account(filename='creds.json')

sheet_income = gc.open(GSHEET_NAME).worksheet("–î–æ—Ö–æ–¥—ã")

class PaymentStates(StatesGroup):
    confirm = State()

def confirm_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"))
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    builder.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

@router.message(lambda m: m.text == "üí≥ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É —Ñ–∏—Ä–º–µ")
async def start_payment_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ñ–∏—Ä–º—ã
    incomes = sheet_income.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    unpaid_requests = []
    total_debt = 0
    
    for i, row in enumerate(incomes, start=2):  # start=2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(row) >= 7 and row[1] == "üè¢ –§–∏—Ä–º–∞" and row[6] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ":
            try:
                debt = float(row[5]) if row[5] else 0
                if debt > 0:
                    unpaid_requests.append({
                        'row_index': i,
                        'date': row[0],
                        'request_number': row[2],
                        'debt': debt
                    })
                    total_debt += debt
            except:
                continue
    
    if not unpaid_requests:
        await message.answer("‚úÖ –ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", reply_markup=main_kb)
        return
    
    await state.update_data(unpaid_requests=unpaid_requests, total_debt=total_debt)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    requests_text = "\n".join([f"{req['date']} - {req['request_number']} - {req['debt']:,.0f} ‚ÇΩ" 
                              for req in unpaid_requests[:10]])  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
    
    if len(unpaid_requests) > 10:
        requests_text += f"\n... –∏ –µ—â–µ {len(unpaid_requests) - 10} –∑–∞—è–≤–æ–∫"
    
    response = (
        f"üí≥ –û–ü–õ–ê–¢–ê –§–ò–†–ú–ï\n"
        f"üìã –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(unpaid_requests)}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ–ª–≥: {total_debt:,.0f} ‚ÇΩ\n\n"
        f"üìã –ó–∞—è–≤–∫–∏:\n{requests_text}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤—Å–µ–π —Å—É–º–º—ã?"
    )
    
    await message.answer(response, reply_markup=confirm_kb())
    await state.set_state(PaymentStates.confirm)

@router.message(PaymentStates.confirm)
async def confirm_payment(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞" or message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", reply_markup=main_kb)
        return
        
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        data = await state.get_data()
        unpaid_requests = data['unpaid_requests']
        total_debt = data['total_debt']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        updated_count = 0
        for request in unpaid_requests:
            try:
                sheet_income.update_cell(request['row_index'], 7, "–û–ø–ª–∞—á–µ–Ω–æ")  # 7-–π —Å—Ç–æ–ª–±–µ—Ü - —Å—Ç–∞—Ç—É—Å
                updated_count += 1
            except Exception as e:
                print(f"Error updating row {request['row_index']}: {e}")
        
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"üìã –ó–∞—è–≤–æ–∫ –æ–ø–ª–∞—á–µ–Ω–æ: {updated_count}\n"
            f"üí∞ –°—É–º–º–∞: {total_debt:,.0f} ‚ÇΩ\n"
            f"üè¢ –î–æ–ª–≥ –ø–µ—Ä–µ–¥ —Ñ–∏—Ä–º–æ–π –æ–±–Ω—É–ª–µ–Ω!",
            reply_markup=main_kb
        )
        await state.clear()
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
