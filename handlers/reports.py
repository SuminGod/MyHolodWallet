# handlers/reports.py
import datetime
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton
from utils.cancel_handler import cancel_handler
from utils.user_manager import sheets_manager

from keyboards import main_kb, report_kb, firm_report_kb

router = Router()
logger = logging.getLogger(__name__)

class FirmReportStates(StatesGroup):
    period = State()

class MonthReportStates(StatesGroup):
    select_month = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–ê –í–´–ë–û–†–ê –ú–ï–°–Ø–¶–ê ==========
def get_months_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    builder = ReplyKeyboardBuilder()
    
    # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    current_year = datetime.datetime.now().year
    months_ru = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    current_month = datetime.datetime.now().month
    for i in range(current_month):
        builder.add(KeyboardButton(text=f"{months_ru[i]} {current_year}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞
    for i in range(12):
        builder.add(KeyboardButton(text=f"{months_ru[i]} {current_year-1}"))
    
    builder.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(3, 3, 3, 3, 3, 3, 1)
    return builder.as_markup(resize_keyboard=True)

# ========== –û–¢–ß–ï–¢–´ ==========
@router.message(lambda m: m.text == "üìä –û—Ç—á–µ—Ç")
async def show_reports(message: Message):
    await message.answer("–ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –Ω—É–∂–µ–Ω?", reply_markup=report_kb)

@router.message(lambda m: m.text in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóìÔ∏è –ú–µ—Å—è—Ü", "üìà –ì–æ–¥"])
async def generate_personal_report(message: Message, state: FSMContext):
    if message.text == "üóìÔ∏è –ú–µ—Å—è—Ü":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        await state.set_state(MonthReportStates.select_month)
        await message.answer("–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=get_months_kb())
        return
        
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –≥–æ–¥) —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    await generate_period_report(message, message.text)

@router.message(MonthReportStates.select_month)
async def process_month_selection(message: Message, state: FSMContext):
    if await cancel_handler(message, state):
        return
        
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
        return
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    try:
        month_text = message.text
        await generate_monthly_report(message, month_text)
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü")
        logger.error(f"Month report error: {e}")

async def generate_monthly_report(message: Message, month_text: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü"""
    try:
        # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        months_ru = {
            "–Ø–Ω–≤–∞—Ä—å": 1, "–§–µ–≤—Ä–∞–ª—å": 2, "–ú–∞—Ä—Ç": 3, "–ê–ø—Ä–µ–ª—å": 4, "–ú–∞–π": 5, "–ò—é–Ω—å": 6,
            "–ò—é–ª—å": 7, "–ê–≤–≥—É—Å—Ç": 8, "–°–µ–Ω—Ç—è–±—Ä—å": 9, "–û–∫—Ç—è–±—Ä—å": 10, "–ù–æ—è–±—Ä—å": 11, "–î–µ–∫–∞–±—Ä—å": 12
        }
        
        parts = month_text.split()
        month_name = parts[0]
        year = int(parts[1])
        month = months_ru[month_name]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        start_date = datetime.date(year, month, 1)
        if month == 12:
            end_date = datetime.date(year + 1, 1, 1) - datetime.timedelta(days=1)
        else:
            end_date = datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)
        
        await generate_report_by_dates(message, start_date, end_date, f"–∑–∞ {month_text.lower()}")
        
    except Exception as e:
        await message.answer("‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—è—Ü. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        logger.error(f"Month parsing error: {e}")

async def generate_period_report(message: Message, period_type: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã"""
    today = datetime.date.today()
    
    if period_type == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        start_date = today
        end_date = today
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
    elif period_type == "üìÜ –ù–µ–¥–µ–ª—è":
        start_date = today - datetime.timedelta(days=7)
        end_date = today
        period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period_type == "üìà –ì–æ–¥":
        start_date = today - datetime.timedelta(days=365)
        end_date = today
        period_text = "–∑–∞ –≥–æ–¥"
    else:  # –ú–µ—Å—è—Ü (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
        start_date = today - datetime.timedelta(days=30)
        end_date = today
        period_text = "–∑–∞ –º–µ—Å—è—Ü"
    
    await generate_report_by_dates(message, start_date, end_date, period_text)

async def generate_report_by_dates(message: Message, start_date: datetime.date, end_date: datetime.date, period_text: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        incomes = sheets_manager.get_user_data(sheets_manager.sheet_income, user_id)
        expenses = sheets_manager.get_user_data(sheets_manager.sheet_expense, user_id)
        tips_data = sheets_manager.get_user_data(sheets_manager.sheet_tips, user_id)
        bets_data = sheets_manager.get_user_data(sheets_manager.sheet_bets, user_id)
        
        # –†–∞—Å—á–µ—Ç—ã
        total_my_income = 0
        total_tips = 0
        total_expenses = 0
        total_bets_net = 0
        firm_count = 0
        avito_count = 0
        sarafanka_count = 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ö–æ–¥—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - user_id)
        for row in incomes:
            if len(row) >= 7:  # user_id + 6 –ø–æ–ª–µ–π
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    if start_date <= row_date <= end_date:
                        my_income = float(row[5]) if row[5] else 0  # row[5] - –º–æ–π –¥–æ—Ö–æ–¥
                        total_my_income += my_income
                        
                        source = row[2]  # row[2] - –∏—Å—Ç–æ—á–Ω–∏–∫
                        if source == "üè¢ –§–∏—Ä–º–∞":
                            firm_count += 1
                        elif source == "üì± –ê–≤–∏—Ç–æ":
                            avito_count += 1
                        elif source == "üë• –°–∞—Ä–∞—Ñ–∞–Ω–∫–∞":
                            sarafanka_count += 1
                except:
                    continue
        
        # –ß–∞–µ–≤—ã–µ
        for row in tips_data:
            if len(row) >= 4:  # user_id + 3 –ø–æ–ª—è
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    if start_date <= row_date <= end_date:
                        total_tips += float(row[3]) if row[3] else 0  # row[3] - —Å—É–º–º–∞
                except:
                    continue
        
        # –†–∞—Å—Ö–æ–¥—ã
        for row in expenses:
            if len(row) >= 4:  # user_id + 3 –ø–æ–ª—è
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    if start_date <= row_date <= end_date:
                        total_expenses += float(row[3]) if row[3] else 0  # row[3] - —Å—É–º–º–∞
                except:
                    continue
        
        # –°—Ç–∞–≤–∫–∏
        bets_deposits = 0
        bets_withdrawals = 0
        for row in bets_data:
            if len(row) >= 4:  # user_id + 3 –ø–æ–ª—è
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    if start_date <= row_date <= end_date:
                        operation_type = row[2]  # row[2] - –æ–ø–µ—Ä–∞—Ü–∏—è
                        amount = float(row[3]) if row[3] else 0  # row[3] - —Å—É–º–º–∞
                        
                        if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                            bets_deposits += amount
                        elif operation_type == "–í—ã–≤–æ–¥":
                            bets_withdrawals += amount
                except:
                    continue
        
        total_bets_net = bets_withdrawals - bets_deposits
        
        # –û–±—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        total_income_with_tips = total_my_income + total_tips
        total_with_bets = total_income_with_tips + total_bets_net
        balance = total_with_bets - total_expenses
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if period_text.startswith("–∑–∞ "):
            date_range = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
        else:
            date_range = start_date.strftime('%d.%m.%Y')
        
        response = (
            f"üìä –û–¢–ß–ï–¢ {period_text.upper()}:\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_range}\n\n"
            f"üíº –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: {total_my_income:,.0f} ‚ÇΩ\n"
            f"üíù –ß–∞–µ–≤—ã–µ/–ø–æ–¥–∞—Ä–∫–∏: {total_tips:,.0f} ‚ÇΩ\n"
            f"üé∞ –°—Ç–∞–≤–∫–∏: {total_bets_net:+,.0f} ‚ÇΩ\n"
            f"üì§ –†–∞—Å—Ö–æ–¥—ã: {total_expenses:,.0f} ‚ÇΩ\n"
            f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {balance:,.0f} ‚ÇΩ\n\n"
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n"
            f"üè¢ –§–∏—Ä–º–∞: {firm_count}\n"
            f"üì± –ê–≤–∏—Ç–æ: {avito_count}\n" 
            f"üë• –°–∞—Ä–∞—Ñ–∞–Ω–∫–∞: {sarafanka_count}\n"
            f"üéØ –í—Å–µ–≥–æ: {firm_count + avito_count + sarafanka_count}"
        )
        
        await message.answer(response, reply_markup=main_kb)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        logger.error(f"Report error: {e}")

# ========== –û–¢–ß–ï–¢ –§–ò–†–ú–ï ==========
@router.message(lambda m: m.text == "üè¢ –û—Ç—á–µ—Ç —Ñ–∏—Ä–º–µ")
async def start_firm_report(message: Message, state: FSMContext):
    await state.set_state(FirmReportStates.period)
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–æ–ª–≥–∞–º–∏
    user_id = str(message.from_user.id)
    incomes = sheets_manager.get_user_data(sheets_manager.sheet_income, user_id)
    
    unpaid_requests = []
    total_debt = 0
    firm_count = 0
    
    for row in incomes:
        if len(row) >= 8 and row[2] == "üè¢ –§–∏—Ä–º–∞":  # row[2] - –∏—Å—Ç–æ—á–Ω–∏–∫
            try:
                debt = float(row[6]) if row[6] else 0  # row[6] - –¥–æ–ª–≥ —Ñ–∏—Ä–º–µ
                if len(row) >= 8 and row[7] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" and debt > 0:  # row[7] - —Å—Ç–∞—Ç—É—Å
                    unpaid_requests.append({
                        'date': row[1],  # row[1] - –¥–∞—Ç–∞
                        'request_number': row[3],  # row[3] - –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
                        'debt': debt
                    })
                    total_debt += debt
                firm_count += 1
            except:
                continue
    
    status_text = (
        f"üè¢ –¢–ï–ö–£–©–ò–ô –î–û–õ–ì: {total_debt:,.0f} ‚ÇΩ\n"
        f"üìã –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(unpaid_requests)}\n"
        f"üî¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ —Ñ–∏—Ä–º—ã: {firm_count}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
    )
    
    await message.answer(status_text, reply_markup=firm_report_kb)

@router.message(FirmReportStates.period)
async def generate_firm_report(message: Message, state: FSMContext):
    if await cancel_handler(message, state):
        return
        
    try:
        user_id = str(message.from_user.id)
        incomes = sheets_manager.get_user_data(sheets_manager.sheet_income, user_id)
        
        today = datetime.date.today()
        
        if message.text == "üè¢ –ù–µ–¥–µ–ª—è —Ñ–∏—Ä–º—ã":
            # –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–û–õ–¨–ö–û –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò –ó–ê –í–ï–°–¨ –ü–ï–†–ò–û–î
            period_text = "–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ"
            show_only_unpaid = True
            date_filter = None
        elif message.text == "üè¢ –ú–µ—Å—è—Ü —Ñ–∏—Ä–º—ã":
            start_date = today - datetime.timedelta(days=30)
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
            show_only_unpaid = False
            date_filter = start_date
        else:  # –ì–æ–¥ —Ñ–∏—Ä–º—ã
            start_date = today - datetime.timedelta(days=365)
            period_text = "–∑–∞ –≥–æ–¥" 
            show_only_unpaid = False
            date_filter = start_date
        
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Ñ–∏—Ä–º–µ
        firm_repairs = 0
        firm_debt = 0
        firm_count = 0
        firm_requests = []
        
        # –ß–∞–µ–≤—ã–µ —Å –∑–∞—è–≤–æ–∫ —Ñ–∏—Ä–º—ã
        firm_tips = 0
        
        for row in incomes:
            if len(row) >= 7 and row[2] == "üè¢ –§–∏—Ä–º–∞":  # row[2] - –∏—Å—Ç–æ—á–Ω–∏–∫
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                    date_ok = True
                    if date_filter and row_date < date_filter:
                        date_ok = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–ø–ª–∞—Ç–µ
                    payment_ok = True
                    if show_only_unpaid:
                        payment_ok = (len(row) >= 8 and row[7] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")  # row[7] - —Å—Ç–∞—Ç—É—Å
                    
                    if date_ok and payment_ok:
                        repair_amount = float(row[4]) if row[4] else 0  # row[4] - —Å—É–º–º–∞ —á–µ–∫–∞
                        debt = float(row[6]) if row[6] else 0  # row[6] - –¥–æ–ª–≥ —Ñ–∏—Ä–º–µ
                        request_num = row[3] if len(row) > 3 else "?"  # row[3] - –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
                        
                        firm_repairs += repair_amount
                        firm_debt += debt
                        firm_count += 1
                        status = row[7] if len(row) > 7 else "?"  # row[7] - —Å—Ç–∞—Ç—É—Å
                        firm_requests.append(f"{request_num} - {repair_amount:,.0f} ‚ÇΩ ({status})")
                except:
                    continue
        
        # –°—á–∏—Ç–∞–µ–º —á–∞–µ–≤—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–∞–º–∏ —Ñ–∏—Ä–º—ã
        tips_data = sheets_manager.get_user_data(sheets_manager.sheet_tips, user_id)
        for row in tips_data:
            if len(row) >= 5:  # user_id + 4 –ø–æ–ª—è
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    comment = row[4] if len(row) > 4 else ""  # row[4] - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    
                    date_ok = True
                    if date_filter and row_date < date_filter:
                        date_ok = False
                    
                    # –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
                    if date_ok and ("–§–∏—Ä–º–∞" in comment or any(req.split(' - ')[0] in comment for req in firm_requests if ' - ' in req)):
                        firm_tips += float(row[3]) if row[3] else 0  # row[3] - —Å—É–º–º–∞
                except:
                    continue
        
        my_income_from_firm = firm_repairs - firm_debt
        total_income_with_tips = my_income_from_firm + firm_tips
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 15 —à—Ç—É–∫)
        requests_text = "\n".join(firm_requests[:15])
        if len(firm_requests) > 15:
            requests_text += f"\n... –∏ –µ—â–µ {len(firm_requests) - 15} –∑–∞—è–≤–æ–∫"
        
        response = (
            f"üè¢ –û–¢–ß–ï–¢ –§–ò–†–ú–ï ({period_text}):\n"
            f"üîß –ó–∞—è–≤–æ–∫: {firm_count}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {firm_repairs:,.0f} ‚ÇΩ\n"
            f"üè¢ –î–æ–ª–≥ —Ñ–∏—Ä–º–µ: {firm_debt:,.0f} ‚ÇΩ\n"
            f"üí∏ –ú–æ–π –¥–æ—Ö–æ–¥ —Å —Ñ–∏—Ä–º—ã: {my_income_from_firm:,.0f} ‚ÇΩ\n"
            f"üíù –ß–∞–µ–≤—ã–µ —Å –∑–∞—è–≤–æ–∫: {firm_tips:,.0f} ‚ÇΩ\n"
            f"üéØ –ò—Ç–æ–≥–æ —Å —á–∞–µ–≤—ã–º–∏: {total_income_with_tips:,.0f} ‚ÇΩ\n\n"
        )
        
        if firm_requests:
            response += f"üìã –ó–∞—è–≤–∫–∏:\n{requests_text}"
        else:
            response += "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        
        await message.answer(response, reply_markup=main_kb)
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ñ–∏—Ä–º–µ")
        logger.error(f"Firm report error: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
