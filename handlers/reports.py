# handlers/reports.py
import datetime
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import gspread
from utils.cancel_handler import cancel_handler

from keyboards import main_kb, report_kb, firm_report_kb
from config import GSHEET_NAME, GSHEET_CREDS_JSON

router = Router()
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
from config import GSHEET_CREDS
import gspread

if GSHEET_CREDS:
    gc = gspread.service_account_from_dict(GSHEET_CREDS)
else:
    gc = gspread.service_account(filename='creds.json')

sheet_income = gc.open(GSHEET_NAME).worksheet("–î–æ—Ö–æ–¥—ã")
sheet_expense = gc.open(GSHEET_NAME).worksheet("–†–∞—Å—Ö–æ–¥—ã")
sheet_tips = gc.open(GSHEET_NAME).worksheet("–ß–∞–µ–≤—ã–µ")

class FirmReportStates(StatesGroup):
    period = State()

# ========== –û–¢–ß–ï–¢–´ ==========
@router.message(lambda m: m.text in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóìÔ∏è –ú–µ—Å—è—Ü", "üìà –ì–æ–¥"])
async def generate_personal_report(message: Message):
    try:
        incomes = sheet_income.get_all_values()[1:]
        expenses = sheet_expense.get_all_values()[1:]
        tips_data = sheet_tips.get_all_values()[1:]
        bets_data = sheet_bets.get_all_values()[1:] if sheet_bets else []
        
        today = datetime.date.today()
        
        if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            start_date = today
            period_text = "—Å–µ–≥–æ–¥–Ω—è"
        elif message.text == "üìÜ –ù–µ–¥–µ–ª—è":
            start_date = today - datetime.timedelta(days=7)
            period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        elif message.text == "üóìÔ∏è –ú–µ—Å—è—Ü":
            start_date = today - datetime.timedelta(days=30)
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
        else:  # –ì–æ–¥
            start_date = today - datetime.timedelta(days=365)
            period_text = "–∑–∞ –≥–æ–¥"
        
        # –†–∞—Å—á–µ—Ç—ã
        total_my_income = 0
        total_tips = 0
        total_expenses = 0
        total_bets_net = 0  # –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–æ–∫ (–≤—ã–≤–æ–¥—ã - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        firm_count = 0
        avito_count = 0
        sarafanka_count = 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
        for row in incomes:
            if len(row) >= 5:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    if row_date >= start_date:
                        my_income = float(row[4]) if row[4] else 0
                        total_my_income += my_income
                        
                        if row[1] == "üè¢ –§–∏—Ä–º–∞":
                            firm_count += 1
                        elif row[1] == "üì± –ê–≤–∏—Ç–æ":
                            avito_count += 1
                        elif row[1] == "üë• –°–∞—Ä–∞—Ñ–∞–Ω–∫–∞":
                            sarafanka_count += 1
                except:
                    continue
        
        # –ß–∞–µ–≤—ã–µ
        for row in tips_data:
            if len(row) >= 3:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    if row_date >= start_date:
                        total_tips += float(row[2]) if row[2] else 0
                except:
                    continue
        
        # –†–∞—Å—Ö–æ–¥—ã
        for row in expenses:
            if len(row) >= 3:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    if row_date >= start_date:
                        total_expenses += float(row[2]) if row[2] else 0
                except:
                    continue
        
        # –°—Ç–∞–≤–∫–∏
        bets_deposits = 0
        bets_withdrawals = 0
        for row in bets_data:
            if len(row) >= 3:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    if row_date >= start_date:
                        operation_type = row[1]
                        amount = float(row[2]) if row[2] else 0
                        
                        if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                            bets_deposits += amount
                        elif operation_type == "–í—ã–≤–æ–¥":
                            bets_withdrawals += amount
                except:
                    continue
        
        total_bets_net = bets_withdrawals - bets_deposits
        
        # –û–±—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        total_income_with_tips = total_my_income + total_tips
        total_with_bets = total_income_with_tips + total_bets_net
        balance = total_with_bets - total_expenses
        
        response = (
            f"üìä –û–¢–ß–ï–¢ {period_text.upper()}:\n"
            f"üíº –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: {total_my_income:,.0f} ‚ÇΩ\n"
            f"üíù –ß–∞–µ–≤—ã–µ/–ø–æ–¥–∞—Ä–∫–∏: {total_tips:,.0f} ‚ÇΩ\n"
            f"üé∞ –°—Ç–∞–≤–∫–∏: {total_bets_net:+,.0f} ‚ÇΩ\n"
            f"üì§ –†–∞—Å—Ö–æ–¥—ã: {total_expenses:,.0f} ‚ÇΩ\n"
            f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {balance:,.0f} ‚ÇΩ\n\n"
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n"
            f"üè¢ –§–∏—Ä–º–∞: {firm_count}\n"
            f"üì± –ê–≤–∏—Ç–æ: {avito_count}\n" 
            f"üë• –°–∞—Ä–∞—Ñ–∞–Ω–∫–∞: {sarafanka_count}\n"
            f"üéØ –í—Å–µ–≥–æ: {firm_count + avito_count + sarafanka_count}"
        )
        
        await message.answer(response, reply_markup=main_kb)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        logger.error(f"Report error: {e}")

# ========== –û–¢–ß–ï–¢ –§–ò–†–ú–ï ==========
# handlers/reports.py (–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ —Ñ–∏—Ä–º—ã)
@router.message(lambda m: m.text == "üè¢ –û—Ç—á–µ—Ç —Ñ–∏—Ä–º–µ")
async def start_firm_report(message: Message, state: FSMContext):
    await state.set_state(FirmReportStates.period)
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥–æ–ª–≥–∞–º–∏
    incomes = sheet_income.get_all_values()[1:]
    
    unpaid_requests = []
    total_debt = 0
    firm_count = 0
    
    for row in incomes:
        if len(row) >= 7 and row[1] == "üè¢ –§–∏—Ä–º–∞":
            try:
                debt = float(row[5]) if row[5] else 0
                if row[6] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" and debt > 0:
                    unpaid_requests.append({
                        'date': row[0],
                        'request_number': row[2],
                        'debt': debt
                    })
                    total_debt += debt
                firm_count += 1
            except:
                continue
    
    status_text = (
        f"üè¢ –¢–ï–ö–£–©–ò–ô –î–û–õ–ì: {total_debt:,.0f} ‚ÇΩ\n"
        f"üìã –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(unpaid_requests)}\n"
        f"üî¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ —Ñ–∏—Ä–º—ã: {firm_count}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
    )
    
    await message.answer(status_text, reply_markup=firm_report_kb)

@router.message(FirmReportStates.period)
async def generate_firm_report(message: Message, state: FSMContext):
    if await cancel_handler(message, state):
        return
        
    try:
        incomes = sheet_income.get_all_values()[1:]
        
        today = datetime.date.today()
        
        if message.text == "üè¢ –ù–µ–¥–µ–ª—è —Ñ–∏—Ä–º—ã":
            # –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–û–õ–¨–ö–û –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò –ó–ê –í–ï–°–¨ –ü–ï–†–ò–û–î
            period_text = "–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ"
            show_only_unpaid = True
            date_filter = None
        elif message.text == "üè¢ –ú–µ—Å—è—Ü —Ñ–∏—Ä–º—ã":
            start_date = today - datetime.timedelta(days=30)
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
            show_only_unpaid = False
            date_filter = start_date
        else:  # –ì–æ–¥ —Ñ–∏—Ä–º—ã
            start_date = today - datetime.timedelta(days=365)
            period_text = "–∑–∞ –≥–æ–¥" 
            show_only_unpaid = False
            date_filter = start_date
        
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Ñ–∏—Ä–º–µ
        firm_repairs = 0
        firm_debt = 0
        firm_count = 0
        firm_requests = []
        
        # –ß–∞–µ–≤—ã–µ —Å –∑–∞—è–≤–æ–∫ —Ñ–∏—Ä–º—ã
        firm_tips = 0
        
        for row in incomes:
            if len(row) >= 6 and row[1] == "üè¢ –§–∏—Ä–º–∞":
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                    date_ok = True
                    if date_filter and row_date < date_filter:
                        date_ok = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–ø–ª–∞—Ç–µ
                    payment_ok = True
                    if show_only_unpaid:
                        payment_ok = (len(row) >= 7 and row[6] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")
                    
                    if date_ok and payment_ok:
                        repair_amount = float(row[3]) if row[3] else 0
                        debt = float(row[5]) if row[5] else 0
                        request_num = row[2] if len(row) > 2 else "?"
                        
                        firm_repairs += repair_amount
                        firm_debt += debt
                        firm_count += 1
                        status = row[6] if len(row) > 6 else "?"
                        firm_requests.append(f"{request_num} - {repair_amount:,.0f} ‚ÇΩ ({status})")
                except:
                    continue
        
        # –°—á–∏—Ç–∞–µ–º —á–∞–µ–≤—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–∞–º–∏ —Ñ–∏—Ä–º—ã
        tips_data = sheet_tips.get_all_values()[1:]
        for row in tips_data:
            if len(row) >= 4:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    comment = row[3] if len(row) > 3 else ""
                    
                    date_ok = True
                    if date_filter and row_date < date_filter:
                        date_ok = False
                    
                    # –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
                    if date_ok and ("–§–∏—Ä–º–∞" in comment or any(req.split(' - ')[0] in comment for req in firm_requests if ' - ' in req)):
                        firm_tips += float(row[2]) if row[2] else 0
                except:
                    continue
        
        my_income_from_firm = firm_repairs - firm_debt
        total_income_with_tips = my_income_from_firm + firm_tips
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 15 —à—Ç—É–∫)
        requests_text = "\n".join(firm_requests[:15])
        if len(firm_requests) > 15:
            requests_text += f"\n... –∏ –µ—â–µ {len(firm_requests) - 15} –∑–∞—è–≤–æ–∫"
        
        response = (
            f"üè¢ –û–¢–ß–ï–¢ –§–ò–†–ú–ï ({period_text}):\n"
            f"üîß –ó–∞—è–≤–æ–∫: {firm_count}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {firm_repairs:,.0f} ‚ÇΩ\n"
            f"üè¢ –î–æ–ª–≥ —Ñ–∏—Ä–º–µ: {firm_debt:,.0f} ‚ÇΩ\n"
            f"üí∏ –ú–æ–π –¥–æ—Ö–æ–¥ —Å —Ñ–∏—Ä–º—ã: {my_income_from_firm:,.0f} ‚ÇΩ\n"
            f"üíù –ß–∞–µ–≤—ã–µ —Å –∑–∞—è–≤–æ–∫: {firm_tips:,.0f} ‚ÇΩ\n"
            f"üéØ –ò—Ç–æ–≥–æ —Å —á–∞–µ–≤—ã–º–∏: {total_income_with_tips:,.0f} ‚ÇΩ\n\n"
        )
        
        if firm_requests:
            response += f"üìã –ó–∞—è–≤–∫–∏:\n{requests_text}"
        else:
            response += "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        if show_only_unpaid and firm_debt > 0:
            from aiogram.utils.keyboard import ReplyKeyboardBuilder
            from aiogram.types import KeyboardButton
            
            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text="üí≥ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É —Ñ–∏—Ä–º–µ"))
            builder.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
            builder.adjust(1)
            
            await message.answer(response, reply_markup=builder.as_markup(resize_keyboard=True))
        else:
            await message.answer(response, reply_markup=main_kb)
        
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ñ–∏—Ä–º–µ")
        logger.error(f"Firm report error: {e}")
        # –û–ë–†–ê–ë–û–¢–ö–ê –õ–Æ–ë–´–• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    from keyboards import main_kb
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
@router.message(lambda m: m.text == "üìä –û—Ç—á–µ—Ç")
async def handle_report_button(message: Message):

    await show_reports(message)


