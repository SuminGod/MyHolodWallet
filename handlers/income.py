# handlers/income.py
import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import gspread
from gspread.exceptions import APIError
from utils.cancel_handler import cancel_handler

from keyboards import main_kb, income_kb, tips_kb
from config import GSHEET_NAME, GSHEET_CREDS_JSON

router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
from config import GSHEET_CREDS
import gspread

if GSHEET_CREDS:
    gc = gspread.service_account_from_dict(GSHEET_CREDS)
else:
    gc = gspread.service_account(filename='creds.json')

sheet_income = gc.open(GSHEET_NAME).worksheet("–î–æ—Ö–æ–¥—ã")
sheet_tips = gc.open(GSHEET_NAME).worksheet("–ß–∞–µ–≤—ã–µ")

class IncomeStates(StatesGroup):
    source = State()
    request_number = State()
    amount = State()
    my_income = State()
    tips = State()

class TipsStates(StatesGroup):
    type = State()
    amount = State()
    comment = State()

# ========== –î–û–•–û–î–´ ==========
@router.message(lambda m: m.text == "üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income_start(message: Message, state: FSMContext):
    await state.set_state(IncomeStates.source)
    await message.answer("–û—Ç–∫—É–¥–∞ –∑–∞—è–≤–∫–∞?", reply_markup=income_kb)

@router.message(IncomeStates.source)
async def process_income_source(message: Message, state: FSMContext):
    if await cancel_handler(message, state):
        return
    
    await state.update_data(source=message.text)
    
    if message.text == "üè¢ –§–∏—Ä–º–∞":
        await state.set_state(IncomeStates.request_number)
        await message.answer("üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –æ—Ç —Ñ–∏—Ä–º—ã:")
    else:  # –ê–≤–∏—Ç–æ/–°–∞—Ä–∞—Ñ–∞–Ω–∫–∞
        await state.set_state(IncomeStates.amount) 
        await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª –ø–æ —á–µ–∫—É?")

@router.message(IncomeStates.request_number)
async def process_request_number(message: Message, state: FSMContext):
    await state.update_data(request_number=message.text)
    await state.set_state(IncomeStates.amount)
    await message.answer("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —á–µ–∫—É —Ñ–∏—Ä–º—ã:")

@router.message(IncomeStates.amount)
async def process_income_amount(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        source = data["source"]
        amount = float(message.text.replace(',', '.'))
        
        if source == "üè¢ –§–∏—Ä–º–∞":
            await state.update_data(repair_amount=amount)
            await state.set_state(IncomeStates.my_income)
            await message.answer("üí∏ –°–∫–æ–ª—å–∫–æ —Ç–≤–æ–π –¥–æ—Ö–æ–¥ –ø–æ —á–µ–∫—É?")
        else:
            # –ê–≤–∏—Ç–æ/–°–∞—Ä–∞—Ñ–∞–Ω–∫–∞ - –≤—Å—è —Å—É–º–º–∞ —ç—Ç–æ –º–æ–π –¥–æ—Ö–æ–¥
            await state.update_data(my_income=amount)
            await state.set_state(IncomeStates.tips)
            await message.answer("üíù –ë—ã–ª–∏ —á–∞–µ–≤—ã–µ? (–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏ 0)")
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:")

@router.message(IncomeStates.my_income)
async def process_my_income(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        my_income = float(message.text.replace(',', '.'))
        repair_amount = data["repair_amount"]
        
        if my_income > repair_amount:
            await message.answer("‚ùå –¢–≤–æ–π –¥–æ—Ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–π —Å—É–º–º—ã. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
            
        await state.update_data(my_income=my_income)
        await state.set_state(IncomeStates.tips)
        await message.answer("üíù –ë—ã–ª–∏ —á–∞–µ–≤—ã–µ? (–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏ 0)")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:")

@router.message(IncomeStates.tips)
async def process_tips(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        source = data["source"]
        request_number = data.get('request_number', '')
        repair_amount = data.get("repair_amount", 0)
        my_income = data["my_income"]
        tips = float(message.text.replace(',', '.')) if message.text != "0" else 0
        
        # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–∞ —Ñ–∏—Ä–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏—Ä–º—ã)
        debt_to_firm = repair_amount - my_income if source == "üè¢ –§–∏—Ä–º–∞" else 0
        
        today = datetime.date.today().strftime("%d.%m.%Y")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥ (–ë–ï–ó —á–∞–µ–≤—ã—Ö –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ)
        values = [today, source, request_number, repair_amount, my_income, debt_to_firm]
        sheet_income.append_row(values)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞–µ–≤—ã–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –û–¢–î–ï–õ–¨–ù–û
        if tips > 0:
            tip_type = "–ß–∞–µ–≤—ã–µ —Å –∑–∞—è–≤–∫–∏"
            tip_comment = f"–ó–∞—è–≤–∫–∞ {request_number} ({source})" if request_number else f"{source}"
            tip_values = [today, tip_type, tips, tip_comment]
            sheet_tips.append_row(tip_values)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        if source == "üè¢ –§–∏—Ä–º–∞":
            response += f"üî¢ –ó–∞—è–≤–∫–∞: {request_number}\n"
            response += f"üíµ –°—É–º–º–∞ —á–µ–∫–∞: {repair_amount} ‚ÇΩ\n"
            response += f"üí∏ –¢–≤–æ–π –¥–æ—Ö–æ–¥: {my_income} ‚ÇΩ\n"
            response += f"üè¢ –î–æ–ª–≥ —Ñ–∏—Ä–º–µ: {debt_to_firm} ‚ÇΩ\n"
        else:
            response += f"üí∏ –¢–≤–æ–π –¥–æ—Ö–æ–¥: {my_income} ‚ÇΩ\n"
            
        if tips > 0:
            response += f"üíù –ß–∞–µ–≤—ã–µ: +{tips} ‚ÇΩ\n"
            response += f"üéØ –ò—Ç–æ–≥–æ: {my_income + tips} ‚ÇΩ"
        
        await message.answer(response, reply_markup=main_kb)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —á–∞–µ–≤—ã—Ö (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ—Ç):")

# ========== –ß–ê–ï–í–´–ï ==========
@router.message(lambda m: m.text == "üí∞ –ß–∞–µ–≤—ã–µ")
async def add_tips_start(message: Message, state: FSMContext):
    await state.set_state(TipsStates.type)
    await message.answer("–ß—Ç–æ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥?", reply_markup=tips_kb)

@router.message(TipsStates.type)
async def process_tips_type(message: Message, state: FSMContext):
    if await cancel_handler(message, state):
        return
        
    await state.update_data(tip_type=message.text)
    await state.set_state(TipsStates.amount)
    await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª?")

@router.message(TipsStates.amount)
async def process_tips_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        await state.update_data(amount=amount)
        await state.set_state(TipsStates.comment)
        await message.answer("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç –∫–æ–≥–æ/–∑–∞ —á—Ç–æ):")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:")

@router.message(TipsStates.comment)
async def process_tips_comment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        tip_type = data["tip_type"]
        amount = data["amount"]
        comment = message.text
        
        today = datetime.date.today().strftime("%d.%m.%Y")
        values = [today, tip_type, amount, comment]
        sheet_tips.append_row(values)
        
        await message.answer(f"‚úÖ –ß–∞–µ–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {amount} ‚ÇΩ\n{tip_type}: {comment}", reply_markup=main_kb)
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞–µ–≤—ã—Ö")
        # –û–ë–†–ê–ë–û–¢–ö–ê –õ–Æ–ë–´–• –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    from keyboards import main_kb
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —Ä–æ—É—Ç–µ—Ä–µ –¥–æ—Ö–æ–¥–æ–≤
@router.message(lambda m: m.text == "üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def handle_income_button(message: Message, state: FSMContext):
    await add_income_start(message, state)

@router.message(lambda m: m.text == "üí∞ –ß–∞–µ–≤—ã–µ")
async def handle_tips_button(message: Message, state: FSMContext):

    await add_tips_start(message, state)
