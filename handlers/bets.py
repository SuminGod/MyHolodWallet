# handlers/bets.py
import datetime
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import gspread
from gspread.exceptions import APIError

from keyboards import main_kb, bets_kb, bets_report_kb
from config import GSHEET_NAME, GSHEET_CREDS_JSON

router = Router()
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    gc = gspread.service_account(filename=GSHEET_CREDS_JSON)
    sheet_bets = gc.open(GSHEET_NAME).worksheet("–°—Ç–∞–≤–∫–∏")
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ '–°—Ç–∞–≤–∫–∏' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ '–°—Ç–∞–≤–∫–∏': {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    sheet_bets = None

class BetsStates(StatesGroup):
    operation_type = State()
    amount = State()

class BetsReportStates(StatesGroup):
    period = State()

# ========== –°–¢–ê–í–ö–ò - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
@router.message(lambda m: m.text == "üéØ –°—Ç–∞–≤–∫–∏")
async def bets_main(message: Message):
    await message.answer("üí∞ –£—á–µ—Ç —Å—Ç–∞–≤–æ–∫:", reply_markup=bets_kb)

# ========== –ü–û–ü–û–õ–ù–ï–ù–ò–ï/–í–´–í–û–î ==========
@router.message(lambda m: m.text in ["üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "üí∏ –í—ã–≤–æ–¥"])
async def start_bet_operation(message: Message, state: FSMContext):
    operation_type = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" else "–í—ã–≤–æ–¥"
    await state.update_data(operation_type=operation_type)
    await state.set_state(BetsStates.amount)
    
    if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
        await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–∏–ª?")
    else:
        await message.answer("üí∏ –°–∫–æ–ª—å–∫–æ –≤—ã–≤–µ–ª?")

@router.message(BetsStates.amount)
async def process_bet_amount(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        operation_type = data["operation_type"]
        amount = float(message.text.replace(',', '.'))
        
        today = datetime.date.today().strftime("%d.%m.%Y")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        if sheet_bets:
            values = [today, operation_type, amount]
            sheet_bets.append_row(values)
        
        if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
            response = f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{amount} ‚ÇΩ"
        else:
            response = f"‚úÖ –í—ã–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: -{amount} ‚ÇΩ"
        
        await message.answer(response, reply_markup=bets_kb)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:")
    except APIError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
        logger.error(f"Bets API error: {e}")

# ========== –û–¢–ß–ï–¢–´ –ü–û –°–¢–ê–í–ö–ê–ú ==========
@router.message(lambda m: m.text == "üìä –û—Ç—á–µ—Ç —Å—Ç–∞–≤–æ–∫")
async def start_bets_report(message: Message, state: FSMContext):
    await state.set_state(BetsReportStates.period)
    await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–≤–∫–∞–º?", reply_markup=bets_report_kb)

@router.message(BetsReportStates.period)
async def generate_bets_report(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
        return
        
    try:
        if not sheet_bets:
            await message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        bets_data = sheet_bets.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        today = datetime.date.today()
        
        if message.text == "üéØ –î–µ–Ω—å —Å—Ç–∞–≤–æ–∫":
            start_date = today
            period_text = "–∑–∞ –¥–µ–Ω—å"
        elif message.text == "üéØ –ù–µ–¥–µ–ª—è —Å—Ç–∞–≤–æ–∫":
            start_date = today - datetime.timedelta(days=7)
            period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        elif message.text == "üéØ –ú–µ—Å—è—Ü —Å—Ç–∞–≤–æ–∫":
            start_date = today - datetime.timedelta(days=30)
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
        else:  # –ì–æ–¥ —Å—Ç–∞–≤–æ–∫
            start_date = today - datetime.timedelta(days=365)
            period_text = "–∑–∞ –≥–æ–¥"
        
        # –†–∞—Å—á–µ—Ç—ã
        total_deposits = 0
        total_withdrawals = 0
        deposits_count = 0
        withdrawals_count = 0
        
        for row in bets_data:
            if len(row) >= 3:
                try:
                    row_date = datetime.datetime.strptime(row[0], "%d.%m.%Y").date()
                    if row_date >= start_date:
                        operation_type = row[1]
                        amount = float(row[2]) if row[2] else 0
                        
                        if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                            total_deposits += amount
                            deposits_count += 1
                        elif operation_type == "–í—ã–≤–æ–¥":
                            total_withdrawals += amount
                            withdrawals_count += 1
                except:
                    continue
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã
        difference = total_withdrawals - total_deposits
        difference_sign = "‚ûï" if difference > 0 else "‚ûñ"
        
        response = (
            f"üéØ –û–¢–ß–ï–¢ –ü–û –°–¢–ê–í–ö–ê–ú {period_text.upper()}:\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {deposits_count} —à—Ç\n"
            f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total_deposits:,.0f} ‚ÇΩ\n"
            f"üí∏ –í—ã–≤–æ–¥–æ–≤: {withdrawals_count} —à—Ç\n"
            f"üí≥ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals:,.0f} ‚ÇΩ\n"
            f"üìä –†–∞–∑–Ω–∏—Ü–∞: {difference_sign}{abs(difference):,.0f} ‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        if difference > 0:
            response += f"‚úÖ –í –ø–ª—é—Å–µ –Ω–∞ {difference:,.0f} ‚ÇΩ"
        elif difference < 0:
            response += f"‚ùå –í –º–∏–Ω—É—Å–µ –Ω–∞ {abs(difference):,.0f} ‚ÇΩ"
        else:
            response += f"‚öñÔ∏è –í –Ω–æ–ª—å"
        
        await message.answer(response, reply_markup=bets_kb)
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞–≤–∫–∞–º")
        logger.error(f"Bets report error: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —Å—Ç–∞–≤–æ–∫
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_bets(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    from keyboards import main_kb
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
@router.message(lambda m: m.text == "üéØ –°—Ç–∞–≤–∫–∏")
async def handle_bets_button(message: Message):
    await bets_main(message)