# handlers/bets.py
import datetime
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils.user_manager import sheets_manager

from keyboards import main_kb, bets_kb, bets_report_kb

router = Router()
logger = logging.getLogger(__name__)

class BetsStates(StatesGroup):
    operation_type = State()
    amount = State()

class BetsReportStates(StatesGroup):
    period = State()

# ========== –°–¢–ê–í–ö–ò - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
@router.message(lambda m: m.text == "üéØ –°—Ç–∞–≤–∫–∏")
async def bets_main(message: Message):
    await message.answer("üí∞ –£—á–µ—Ç —Å—Ç–∞–≤–æ–∫:", reply_markup=bets_kb)

# ========== –ü–û–ü–û–õ–ù–ï–ù–ò–ï/–í–´–í–û–î ==========
@router.message(lambda m: m.text in ["üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "üí∏ –í—ã–≤–æ–¥"])
async def start_bet_operation(message: Message, state: FSMContext):
    operation_type = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" else "–í—ã–≤–æ–¥"
    await state.update_data(operation_type=operation_type)
    await state.set_state(BetsStates.amount)
    
    if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
        await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–∏–ª?")
    else:
        await message.answer("üí∏ –°–∫–æ–ª—å–∫–æ –≤—ã–≤–µ–ª?")

@router.message(BetsStates.amount)
async def process_bet_amount(message: Message, state: FSMContext):
    try:
        user_id = str(message.from_user.id)
        
        data = await state.get_data()
        operation_type = data["operation_type"]
        amount = float(message.text.replace(',', '.'))
        
        today = datetime.date.today().strftime("%d.%m.%Y")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        values = [today, operation_type, amount]
        success = sheets_manager.append_user_row(sheets_manager.sheet_bets, user_id, values)
        
        if success:
            if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                response = f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{amount} ‚ÇΩ"
            else:
                response = f"‚úÖ –í—ã–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: -{amount} ‚ÇΩ"
            
            await message.answer(response, reply_markup=bets_kb)
            await state.clear()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
        logger.error(f"Bets error: {e}")

# ========== –û–¢–ß–ï–¢–´ –ü–û –°–¢–ê–í–ö–ê–ú ==========
@router.message(lambda m: m.text == "üìä –û—Ç—á–µ—Ç —Å—Ç–∞–≤–æ–∫")
async def start_bets_report(message: Message, state: FSMContext):
    await state.set_state(BetsReportStates.period)
    await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–≤–∫–∞–º?", reply_markup=bets_report_kb)

@router.message(BetsReportStates.period)
async def generate_bets_report(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
        return
        
    try:
        user_id = str(message.from_user.id)
        bets_data = sheets_manager.get_user_data(sheets_manager.sheet_bets, user_id)
        
        today = datetime.date.today()
        
        if message.text == "üéØ –î–µ–Ω—å —Å—Ç–∞–≤–æ–∫":
            start_date = today
            period_text = "–∑–∞ –¥–µ–Ω—å"
        elif message.text == "üéØ –ù–µ–¥–µ–ª—è —Å—Ç–∞–≤–æ–∫":
            start_date = today - datetime.timedelta(days=7)
            period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        elif message.text == "üéØ –ú–µ—Å—è—Ü —Å—Ç–∞–≤–æ–∫":
            start_date = today - datetime.timedelta(days=30)
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
        else:  # –ì–æ–¥ —Å—Ç–∞–≤–æ–∫
            start_date = today - datetime.timedelta(days=365)
            period_text = "–∑–∞ –≥–æ–¥"
        
        # –†–∞—Å—á–µ—Ç—ã
        total_deposits = 0
        total_withdrawals = 0
        deposits_count = 0
        withdrawals_count = 0
        
        for row in bets_data:
            if len(row) >= 4:  # user_id + 3 –ø–æ–ª—è
                try:
                    row_date = datetime.datetime.strptime(row[1], "%d.%m.%Y").date()  # row[1] - –¥–∞—Ç–∞
                    if row_date >= start_date:
                        operation_type = row[2]  # row[2] - –æ–ø–µ—Ä–∞—Ü–∏—è
                        amount = float(row[3]) if row[3] else 0  # row[3] - —Å—É–º–º–∞
                        
                        if operation_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                            total_deposits += amount
                            deposits_count += 1
                        elif operation_type == "–í—ã–≤–æ–¥":
                            total_withdrawals += amount
                            withdrawals_count += 1
                except:
                    continue
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã
        difference = total_withdrawals - total_deposits
        difference_sign = "‚ûï" if difference > 0 else "‚ûñ"
        
        response = (
            f"üéØ –û–¢–ß–ï–¢ –ü–û –°–¢–ê–í–ö–ê–ú {period_text.upper()}:\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {deposits_count} —à—Ç\n"
            f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total_deposits:,.0f} ‚ÇΩ\n"
            f"üí∏ –í—ã–≤–æ–¥–æ–≤: {withdrawals_count} —à—Ç\n"
            f"üí≥ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals:,.0f} ‚ÇΩ\n"
            f"üìä –†–∞–∑–Ω–∏—Ü–∞: {difference_sign}{abs(difference):,.0f} ‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        if difference > 0:
            response += f"‚úÖ –í –ø–ª—é—Å–µ –Ω–∞ {difference:,.0f} ‚ÇΩ"
        elif difference < 0:
            response += f"‚ùå –í –º–∏–Ω—É—Å–µ –Ω–∞ {abs(difference):,.0f} ‚ÇΩ"
        else:
            response += f"‚öñÔ∏è –í –Ω–æ–ª—å"
        
        await message.answer(response, reply_markup=bets_kb)
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞–≤–∫–∞–º")
        logger.error(f"Bets report error: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_bets(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
