# handlers/delete_records.py
import datetime
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from keyboards import main_kb
from utils.user_manager import sheets_manager

router = Router()

class DeleteStates(StatesGroup):
    select_category = State()
    select_record = State()
    confirm_delete = State()

# ========== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô ==========
@router.message(lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏")
async def delete_records_start(message: Message, state: FSMContext):
    await state.set_state(DeleteStates.select_category)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üíµ –î–æ—Ö–æ–¥—ã", callback_data="delete_income"))
    keyboard.add(InlineKeyboardButton(text="üì§ –†–∞—Å—Ö–æ–¥—ã", callback_data="delete_expense"))
    keyboard.add(InlineKeyboardButton(text="üí∞ –ß–∞–µ–≤—ã–µ", callback_data="delete_tips"))
    keyboard.add(InlineKeyboardButton(text="üéØ –°—Ç–∞–≤–∫–∏", callback_data="delete_bets"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel"))
    keyboard.adjust(2, 2, 1)
    
    await message.answer(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith('delete_') and c.data != 'delete_cancel')
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace('delete_', '')
    await state.update_data(category=category)
    
    user_id = str(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    records = await get_user_records(user_id, category)
    
    if not records:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardBuilder()
                .add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="delete_back"))
                .as_markup()
        )
        return
    
    await state.update_data(records=records)
    await show_records_for_deletion(callback.message, records, category, state)
    await callback.answer()

async def get_user_records(user_id: str, category: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if category == "income":
            sheet = sheets_manager.sheet_income
            all_data = sheets_manager.get_all_data(sheet)
            user_records = []
            for i, row in enumerate(all_data, start=1):
                if len(row) > 0 and row[0] == user_id:
                    user_records.append({
                        'row_index': i,
                        'date': row[1] if len(row) > 1 else '',
                        'source': row[2] if len(row) > 2 else '',
                        'request_number': row[3] if len(row) > 3 else '',
                        'amount': row[4] if len(row) > 4 else '',
                        'display_text': f"{row[1]} - {row[2]} - {row[4]} ‚ÇΩ" if len(row) > 4 else '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    })
            return user_records[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        elif category == "expense":
            sheet = sheets_manager.sheet_expense
            all_data = sheets_manager.get_all_data(sheet)
            user_records = []
            for i, row in enumerate(all_data, start=1):
                if len(row) > 0 and row[0] == user_id:
                    user_records.append({
                        'row_index': i,
                        'date': row[1] if len(row) > 1 else '',
                        'category': row[2] if len(row) > 2 else '',
                        'amount': row[3] if len(row) > 3 else '',
                        'display_text': f"{row[1]} - {row[2]} - {row[3]} ‚ÇΩ" if len(row) > 3 else '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    })
            return user_records[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        elif category == "tips":
            sheet = sheets_manager.sheet_tips
            all_data = sheets_manager.get_all_data(sheet)
            user_records = []
            for i, row in enumerate(all_data, start=1):
                if len(row) > 0 and row[0] == user_id:
                    user_records.append({
                        'row_index': i,
                        'date': row[1] if len(row) > 1 else '',
                        'type': row[2] if len(row) > 2 else '',
                        'amount': row[3] if len(row) > 3 else '',
                        'display_text': f"{row[1]} - {row[2]} - {row[3]} ‚ÇΩ" if len(row) > 3 else '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    })
            return user_records[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        elif category == "bets":
            sheet = sheets_manager.sheet_bets
            all_data = sheets_manager.get_all_data(sheet)
            user_records = []
            for i, row in enumerate(all_data, start=1):
                if len(row) > 0 and row[0] == user_id:
                    user_records.append({
                        'row_index': i,
                        'date': row[1] if len(row) > 1 else '',
                        'operation': row[2] if len(row) > 2 else '',
                        'amount': row[3] if len(row) > 3 else '',
                        'display_text': f"{row[1]} - {row[2]} - {row[3]} ‚ÇΩ" if len(row) > 3 else '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    })
            return user_records[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        return []
    
    except Exception as e:
        print(f"Error getting user records: {e}")
        return []

async def show_records_for_deletion(message: Message, records: list, category: str, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    category_names = {
        "income": "–¥–æ—Ö–æ–¥–æ–≤",
        "expense": "—Ä–∞—Å—Ö–æ–¥–æ–≤", 
        "tips": "—á–∞–µ–≤—ã—Ö",
        "bets": "—Å—Ç–∞–≤–æ–∫"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    for i, record in enumerate(records):
        keyboard.add(InlineKeyboardButton(
            text=f"‚ùå {record['display_text']}",
            callback_data=f"select_record_{i}"
        ))
    
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="delete_back"))
    keyboard.adjust(1)
    
    await message.edit_text(
        f"üóëÔ∏è –í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({category_names[category]}):\n\n"
        f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(records)} –∑–∞–ø–∏—Å–µ–π",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith('select_record_'))
async def process_record_selection(callback: CallbackQuery, state: FSMContext):
    record_index = int(callback.data.replace('select_record_', ''))
    
    data = await state.get_data()
    records = data['records']
    category = data['category']
    
    if record_index < len(records):
        selected_record = records[record_index]
        await state.update_data(selected_record=selected_record)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="delete_back"))
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?\n\n"
            f"üìÑ {selected_record['display_text']}",
            reply_markup=keyboard.as_markup()
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == 'confirm_delete')
async def confirm_deletion(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_record = data['selected_record']
    category = data['category']
    
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Google Sheets
        if category == "income":
            sheet = sheets_manager.sheet_income
        elif category == "expense":
            sheet = sheets_manager.sheet_expense
        elif category == "tips":
            sheet = sheets_manager.sheet_tips
        elif category == "bets":
            sheet = sheets_manager.sheet_bets
        else:
            raise ValueError("Unknown category")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        sheet.delete_rows(selected_record['row_index'])
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n"
            f"üóëÔ∏è {selected_record['display_text']}",
            reply_markup=InlineKeyboardBuilder()
                .add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â—ë", callback_data="delete_more"))
                .add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="delete_main"))
                .adjust(2)
                .as_markup()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}",
            reply_markup=InlineKeyboardBuilder()
                .add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="delete_back"))
                .as_markup()
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == 'delete_more')
async def delete_more_records(callback: CallbackQuery, state: FSMContext):
    await delete_records_start(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data in ['delete_back', 'delete_cancel'])
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await delete_records_start(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == 'delete_main')
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
