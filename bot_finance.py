# bot_finance.py
import logging
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import TOKEN
from handlers import base_router, income_router, expense_router, reports_router, bets_router, firm_payment_router, admin_router, delete_router
# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# =======================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    # =======================
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    # =======================
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(token=TOKEN)
        dp = Dispatcher(storage=MemoryStorage())
        
        # =======================
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        # =======================
        dp.include_router(admin_router) 
        dp.include_router(income_router)
        dp.include_router(expense_router)
        dp.include_router(reports_router)
        dp.include_router(bets_router)
        dp.include_router(firm_payment_router)  # –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
        dp.include_router(base_router)
        dp.include_router(delete_router) 
        
        logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # =======================
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        # =======================
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        await main()

if __name__ == "__main__":
    asyncio.run(main())


